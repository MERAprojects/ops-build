#
# Parse .ops-config file and convert config symbols to a format which build
# system understands.
#
# .ops-config is autogenerated by Kconfig system. Following holds true with
# respect to autogenerated Kconfig symbols for OpenSwitch:
#
#  - Disabled symbols are either not present or commented out (start with '#')
#  - All enabled symbols start with OPS_CONFIG_
#  - '=' separates symbols from values assigned.
#  - Enabled bool symbols end with '=y' and are added to IMAGE_FEATURES
#    provided they are part of the master mapping file.
#  - Enabled symbols not ending with '=y' are of type string/hex/int and
#    passed on to build system as key-value pairs.
#
# Current limitations of parser logic:
#  - Symbols of type 'tristate' (modules) are not supported
#
def get_ops_config_symbols(d):

    config_file_path = d.getVar("TOPDIR") + "/.ops-config"
    ops_feature = ""

    try:
        config_file = open(config_file_path, "r")
    except IOError:
        return ops_feature

    # Pick enabled symbols
    for line in config_file:
        line = line.strip()

        if line.startswith("OPS_CONFIG_"):
            config_param = line.split('=', 1)

            if config_param[1] == 'y':
                config_symbol = config_param[0].split('_', 2)[2]
                ops_feature += config_symbol + " "

                # Create empty FEATURE_PACKAGES for enabled symbols
                feature_package = "FEATURE_PACKAGES_" + config_symbol
                d.appendVar(feature_package, "")

    config_file.close()
    return ops_feature

#
# Following section maps feature to package group
#  - Syntax: FEATURE_PACKAGES_<Kconfig symbol> += "<one or more packages>"
#
# Please keep this sorted alphabetically
#
FEATURE_PACKAGES_BROADVIEW += "ops-broadview"
FEATURE_PACKAGES_BUFMON += "ops-bufmond"
